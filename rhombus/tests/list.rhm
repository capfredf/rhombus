#lang rhombus

block:
  import "static_arity.rhm"
  static_arity.check:
    ConsList(l, ...)
    ConsList.length(lst)
    ConsList.cons(a, d)
    ConsList.map(lst, proc)
    ConsList.for_each(lst, proc)
    ConsList.has_element(lst, val)
    ConsList.remove(lst, val)
    ConsList.drop_left(lst, n)
    ConsList.drop_right(lst, n)

check:
  ConsList.length([1, 2, 3])
  ~is 3

check:
  ConsList.length({1, 2, 3})
  ~raises values("contract violation", "expected: ConsList")

check:
  [1] :: NonemptyList
  ~is [1]

check:
  [] :: NonemptyList
  ~raises "does not satisfy annotation"

block:
  use_static
  check:
    [1, 2, 3].length()
    ~is 3
  check:
    [1, 2, 3][0]
    ~is 1
  check:
    [1, 2, 3].first
    ~is 1
  check:
    [1, 2, 3].rest
    ~is [2, 3]
  check:
    ConsList(1, 2, 3).length()
    ~is 3
  check:
    def lst = [1, 2, 3]
    lst.length()
    ~is 3
  check:
    def lst :: ConsList = dynamic([1, 2, 3])
    lst.length()
    ~is 3
  check:
    def lst :~ ConsList = dynamic([1, 2, 3])
    lst.length()
    ~is 3
  check:
    def lst :: ConsList.of(Int) = dynamic([1, 2, 3])
    lst.length()
    ~is 3
  check:
    def [v, ...] = dynamic([1, 2, 3])
    [v, ...].length()
    ~is 3
  check:
    def lst :: ConsList.of(ConsList) = dynamic([[1, 2, 3]])
    lst.first.length()
    ~is 3
  check:
    def lst :: ConsList.of(Int) = dynamic([1, 2, 3])
    lst.rest.length()
    ~is 2
  check:
    def lst :: NonemptyList.of(ConsList) = dynamic([[1, 2, 3]])
    lst.first.length()
    ~is 3
  check:
    ConsList.cons(1, [2, 3])
    ~is [1, 2, 3]
  check:
    ConsList.cons(1, [2, 3]).length()
    ~is 3

block:
  check:
    dynamic([1, 2, 3]).length()
    ~is 3
  check:
    dynamic([1, 2, 3]).first
    ~is 1
  check:
    dynamic([1, 2, 3]).rest
    ~is [2, 3]
  check:
    dynamic([1, 2, 3])[0]
    ~is 1

check:
  match []
  | ConsList.empty: "empty"
  | ~else: "other"
  ~is "empty"

check:
  match [1]
  | ConsList.empty: "empty"
  | ~else: "other"
  ~is "other"

check:
  use_static
  [1, 2].reverse().reverse()
  ~is [1, 2]

block:
  check [1, 2].map(fun (x): x + 1).reverse() ~is [3, 2]
  block:
    def mutable sum = 0
    check [1, 2].for_each(fun (x): sum := sum + x) ~is #void
    check sum ~is 3

check:
  ConsList.append(&[[1, 2], [3], [4, 5]]) ~is [1, 2, 3, 4, 5]
  [1, 2].append() ~is [1, 2]
  [1, 2].append([3]) ~is [1, 2, 3]
  [1, 2].append([3], [4, 5]) ~is [1, 2, 3, 4, 5]
  [1, 2].append(3) ~raises "contract violation"

check:
  match []
  | ConsList.cons(hd,tl): "no"
  | []: "empty"
  ~is "empty"

check:
  [1, 2, 3].has_element(2) ~is #true
  [1, 2, 3].has_element(4) ~is #false
  dynamic([1, 2, 3]).has_element(1) ~is #true

check:
  [1, 2, 3].remove(2) ~is [1, 3]
  [1, 2, 3].remove(4) ~is [1, 2, 3]
  [1, 2, 2, 3].remove(4) ~is [1, 2, 2, 3]
  dynamic([1, 2, 3]).remove(1) ~is [2, 3]

check:
  [1, 2, 3].drop_left(2) ~is [3]
  ConsList.drop_left([1, 2, 3], 2) ~is [3]
  [1, 2, 3].drop_right(2) ~is [1]
  ConsList.drop_right([1, 2, 3], 2) ~is [1]

check:
  use_static
  ConsList.rest([1, 2, 3]).map(math.abs)
  ~is [2, 3]
