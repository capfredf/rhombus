#lang rhombus/static

// Meta-circular interpreter for a Rhombus-like variant
// of the λ-calculus with integers and lists
//
//  <expr> = fun (<id>, ...): <expr>
//         | <expr>(<expr>, ...)
//         | <id>
//         | (<expr>)
//         | <integer>
//         | [<expr>, ...]
//         | <expr> <operator> <expr>
//         | block: let <id> = <expr>; <expr>
//
//  with primitive bindings cons, first, rest, +, -, *
//
//  There's no precedence for operators, though; all assumed
//  at the same precedence and associating to the left

// Example use of the interpreter
module main:
  interp('block:
            let swap = fun (x): [first(rest(x)), first(x)]
            first(swap([1, 2])) + 3',
         init_env)

fun interp(e, env :~ Map):
  match e
  // First three rules are λ-calculus (with multiple arguments)
  | 'fun ($(x :: Identifier), ...): $e':
      fun (arg, ...):
        interp(e, env ++ {x.unwrap(): arg, ...})
  | '$rator($rand, ...)':
      (interp(rator, env))(interp(rand, env), ...)
  | '$(x :: Identifier)':
      env[x.unwrap()]
  // Allow extra parens
  | '($e)':
      interp(e, env)
  // Ints
  | '$(x :: Int)':
      x.unwrap()
  // ConsLists
  | '[$x, ...]':
      [interp(x, env), ...]
  // Operators (no attempt at precedence)
  | '$x ... $(op :: Operator) $y ...':
      env[op.unwrap_op()](interp('$x ...', env),
                          interp('$y ...', env))
  // `let` as a convenience
  | 'block:
       let $(x :: Identifier) = $rhs
       $body':
      interp('(fun ($x): $body)($rhs)', env)

// Some primitives in an initial environment
def init_env:
  {'cons'.unwrap(): ConsList.cons,
   'first'.unwrap(): ConsList.first,
   'rest'.unwrap(): ConsList.rest,
   '+'.unwrap_op(): fun(x, y): x + y,
   '-'.unwrap_op(): fun(x, y): x - y,
   '*'.unwrap_op(): fun(x, y): x * y}
