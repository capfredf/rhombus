#lang rhombus/static/and_meta
import:
  meta: rhombus: expose: check

check:
  entry_point.macro 'identity':
    ~mode mode
    ~adjustment adj
    if (mode == #'arity)
    | 2
    | check:
        adj ~is_a entry_point_meta.Adjustment
        adj.prefix_arguments ~is_a ConsList.of(Syntax)
      match 'fun(x): x'
      | '$(e :: entry_point_meta.Parsed(adj))':
          e

  class C():
    method m:
      identity
  C().m("ok")
  ~is "ok"

check:
  entry_point.macro 'identity':
    ~mode mode
    ~adjustment adj
    if (mode == #'arity)
    | [2, [], []]
    | 'fun(x): x'

  class C():
    method m:
      identity
  C().m("ok")
  ~is "ok"

check:
  entry_point.macro 'identity':
    ~mode mode
    ~adjustment adj
    if (mode == #'arity)
    | [2, [], []]
    | def [id, ...] = adj.prefix_arguments
      entry_point_meta.pack('fun($id, ..., x):
                               $(adj.wrap_body(2, 'x'))')

  class C():
    method m:
      identity
  C().m("ok")
  ~is "ok"


check:
  entry_point.macro 'kw_identity':
    ~mode mode
    ~adjustment adj
    if (mode == #'arity)
    | [1, [#'~kw], [#'~kw]]
    | 'fun(~kw: x): x'

  class C():
    method m:
      kw_identity
  C().m(~kw: "ok")
  ~is "ok"
