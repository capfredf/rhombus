#lang rhombus

check:
  ~eval
  fun f([x]):
    ~unsafe: 0
    1
  ~throws "binding does not fit limitations"

check:
  ~eval
  fun f(~x: [x]):
    ~unsafe: 0
    1
  ~throws "binding does not fit limitations"

check:
  ~eval
  fun f(x = 5):
    ~unsafe: 0
    1
  ~throws "binding does not fit limitations"

check:
  ~eval
  fun f(0):
    ~unsafe: 0
    1
  ~throws "binding does not fit limitations"

check:
  ~eval
  fun f(& x):
    ~unsafe: 0
    1
  ~throws "binding does not fit limitations"

check:
  ~eval
  fun
  | f(~x: x):
      ~unsafe: 0
      1
  ~throws "binding does not fit limitations"

check:
  ~eval
  fun
  | f(x):
      ~unsafe: 0
      1
  | f(x, y):
      1
  ~throws "not every case has an unsafe block"

check:
  ~eval
  fun
  | f(x):
      1
  | f(x, y):
      ~unsafe: 0
      1
  ~throws "not every case has an unsafe block"

check:
  ~eval
  fun f(x):
    ~unsafe 0
    1
  ~throws "bad syntax"

module ~early unsafeable ~lang rhombus:
  export:
    all_defined
  fun f(x):
    ~unsafe: [0, x]
    [1, x]
  fun f_parens(((x))):
    ~unsafe: [0, x]
    [1, x]
  fun g(x, y, z, ...):
    ~unsafe: [0, x, y, PairList[z, ...]]
    [1, x, y, [z, ...]]
  fun h(x :: Int):
    ~unsafe: [0, x]
    [1, x]
  fun j(~x: x :: Int, ~y: y, z):
    ~unsafe: [0, x, y, z]
    [1, x, y, z]
  fun
  | k(x, y, z):
      ~unsafe: [0, x, y, z]
      [1, x, y, z]
  fun
  | m(x, y):
      ~unsafe: [0, x, y]
      [1, x, y]
  | m(x, y, z):
      ~unsafe: [-1, x, y, z]
      [-2, x, y, z]
  fun
  | n(x, y):
      ~unsafe: [0, x, y]
      [1, x, y]
  | n(x, y, z, ...):
      ~unsafe: [-1, x, y, z, ...]
      [-2, x, y, z, ...]
  operator (x %% y):
    ~unsafe: [0, x, y]
    [1, x, y]
  operator (x %!):
    ~unsafe: [0, x]
    [1, x]
  operator (%> x):
    ~unsafe: [0, x]
    [1, x]
  operator
  | (x %? y):
      ~unsafe: [0, x, y]
      [1, x, y]
  | (%? y):
      ~unsafe: [0, y]
      [1, y]
  operator
  | (x %* y):
      ~unsafe: [0, x, y]
      [1, x, y]
  | (x %* y):
      ~unsafe: "oops"
      "oops"
  operator
  | (x %/):
      ~unsafe: [0, [x]]
      [1, [x]]
  | (%/ y):
      ~unsafe: [0, y]
      [1, y]

module ~early use_as_safe ~lang rhombus:
  import:
    parent!unsafeable open
  check f(2) ~is [1, 2]
  check f_parens(2) ~is [1, 2]
  check g(2, 3, 4, 5, 6) ~is [1, 2, 3, [4, 5, 6]]
  check h(2) ~is [1, 2]
  check h(2.0) ~throws values(error.annot_msg("argument"),
                              error.val(~label: "argument", 2.0).msg)
  check j(~x: 2, ~y: 3, 4) ~is [1, 2, 3, 4]
  check j(~x: 2.0, ~y: 3, 4) ~throws values(error.annot_msg("argument"),
                                            error.val(~label: "argument", 2.0).msg)
  check k(2, 3, 4) ~is [1, 2, 3, 4]
  check m(2, 3, 4) ~is [-2, 2, 3, 4]
  check m(2, 3) ~is [1, 2, 3]
  check n(2, 3, 4, 5, 6) ~is [-2, 2, 3, 4, 5, 6]
  check n(2, 3) ~is [1, 2, 3]
  check 2 %% 3 ~is [1, 2, 3]
  check 2 %! ~is [1, 2]
  check %> 2 ~is [1, 2]
  check 2 %? 3 ~is [1, 2, 3]
  check %? 3 ~is [1, 3]
  check 2 %* 3 ~is [1, 2, 3]
  check 2 %/ ~is [1, [2]]
  check %/ 2 ~is [1, 2]

module ~early use_as_unsafe ~lang rhombus:
  import:
    rhombus/unsafe
    parent!unsafeable open
  unsafe.use_unsafe
  check f(2) ~is [0, 2]
  check f_parens(2) ~is [0, 2]
  check g(2, 3, 4, 5, 6) ~is [0, 2, 3, PairList[4, 5, 6]]
  check h(2) ~is [0, 2]
  check h(2.0) ~is [0, 2.0]
  check j(~x: 2, ~y: 3, 4) ~is [0, 2, 3, 4]
  check j(~x: 2.0, ~y: 3, 4) ~is [0, 2.0, 3, 4]
  check k(2, 3, 4) ~is [0, 2, 3, 4]
  check m(2, 3, 4) ~is [-1, 2, 3, 4]
  check m(2, 3) ~is [0, 2, 3]
  check n(2, 3, 4, 5, 6) ~is [-1, 2, 3, 4, 5, 6]
  check n(2, 3) ~is [0, 2, 3]
  check 2 %% 3 ~is [0, 2, 3]
  check 2 %! ~is [0, 2]
  check %> 2 ~is [0, 2]
  check 2 %? 3 ~is [0, 2, 3]
  check %? 3 ~is [0, 3]
  check 2 %* 3 ~is [0, 2, 3]
  check 2 %/ ~is [0, [2]]
  check %/ 2 ~is [0, 2]

import self!use_as_safe
import self!use_as_unsafe
