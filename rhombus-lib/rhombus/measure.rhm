#lang rhombus/and_meta
import:
  lib("racket/base.rkt"):
    expose:
      time as rkt_time
  rhombus/memory

export:
  time
  memory
  time_and_memory
  real_milliseconds
  cpu_milliseconds
  gc_milliseconds

expr.macro
| 'time $(b && ': ~gc; $body; ...')':
    let [tag, _, ...] = b.unwrap()
    let body = Syntax.make([tag, body, ...])
    'block:
       memory.gc()
       $(expr_meta.pack_s_exp(['rkt_time', expr_meta.pack_expr('block $body')]))'
| 'time: $(body :: Block)':
    expr_meta.pack_s_exp(['rkt_time', expr_meta.pack_expr('block $body')])

expr.macro 'memory: $(body :: Block)':
  'call_with_memory_use(fun () $body)'

fun call_with_memory_use(proc):
  let before = memory.cumulative_use()
  let (after, results):
    call_with_values(proc,
                     fun
                     | (x): values(memory.cumulative_use(), [x])
                     | (& xs): values(memory.cumulative_use(), xs))
  println("allocated: " +& (after - before))
  values(& results)

expr.macro 'time_and_memory: $(body :: Block)':
  'memory: time $body'

fun real_milliseconds() :~ Flonum:
  base.#{current-inexact-monotonic-milliseconds}()

fun cpu_milliseconds() :~ Flonum:
  base.#{current-process-milliseconds}()

fun gc_milliseconds():
    base.#{current-gc-milliseconds}()
